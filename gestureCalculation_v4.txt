/*
 * main.c
 * Constructs a Window housing an output TextLayer to show data from 
 * either modes of operation of the accelerometer.
 */

#include <pebble.h>
#define DEBUG 0
#define TAP_NOT_DATA false
#define THRESHOLD_GESTURE_XAXIS 200
#define THRESHOLD_GESTURE_ZAXIS 200
#define OFFSET_ZAXIS 70
#define OFFSET_XAXIS -30

//Not defining
//#define START_SAMPLE_STRATEGY

static Window *s_main_window;
static TextLayer *s_output_layer;

static int s_InformApp_Ready = 0;
static AppSync s_sync;
static uint8_t s_sync_buffer[64];

typedef enum {
  REQUEST_TYPE,
  RESPONSE_READY
}REQUEST_ENUM;

typedef enum {
  LEFT_SWIPE,
  RIGHT_SWIPE,
  UP_SWIPE,
  DOWN_SWIPE
} CommandKey; 

typedef enum {
  X_AXIS,
  Y_AXIS,
  Z_AXIS
} DirectionKey;

typedef enum  {
  POSITIVE,
  NEGATIVE
}TrendKey;

static CommandKey lastCommand;
static AccelData s_trend_data[10];
static unsigned int s_iter = 0;

static void sync_error_callback(DictionaryResult dict_error, AppMessageResult app_message_error, void *context) {
  APP_LOG(APP_LOG_LEVEL_DEBUG, "App Message Sync Error: %d", app_message_error);
}

static void sync_tuple_changed_callback(const uint32_t key, const Tuple* new_tuple, const Tuple* old_tuple, void* context) {
  APP_LOG(APP_LOG_LEVEL_DEBUG, "App Message Sync Tuple Changed Callback");
}

static void inbox_received_callback(DictionaryIterator *iterator, void *context) {
  // Get the first pair
  Tuple *t = dict_read_first(iterator);

  // Process all pairs present
  while (t != NULL) {
    // Long lived buffer
    static char s_buffer[64];

    // Process this pair's key
    switch (t->key) {
      case RESPONSE_READY:
        // Copy value and display
		s_InformApp_Ready=1;   
        break;
    }

    // Get next pair, if any
    t = dict_read_next(iterator);
  }
}


static int16_t cal_avg(int16_t a1, int16_t a2, int16_t a3) {
   return ((a1+a2+a3)/3);
}

static void clear_trend_data() {
   for (int i = 0; i<10;i++) {
     s_trend_data[i].x = 0;
	 s_trend_data[i].y = 0;
	 s_trend_data[i].z = 0;
   }
}

static TrendKey what_is_trend(int16_t start, int16_t lower, int16_t upper) {
    TrendKey t=POSITIVE;

	if (abs(abs(start)-abs(lower)) > abs(abs(upper)-abs(start)) ) {
	    t = NEGATIVE;
	}
	#if DEBUG
	APP_LOG(APP_LOG_LEVEL_DEBUG, "Trend Calc,start=%d, upper=%d, lower=%d, Trend=%d",start, upper, lower, t);
	#endif
	return  t;
}

static int16_t what_is_delta(int16_t lower, int16_t upper) {
    #if DEBUG
    APP_LOG(APP_LOG_LEVEL_DEBUG, "Delta Calc, upper=%d, lower=%d",upper, lower);
	#endif
	return abs(abs(upper)-abs(lower));
}

static void trend_cal(DirectionKey axis, int16_t *delta_value, TrendKey *trend) {
	int16_t xdelta=0;
	int16_t zdelta=0;
	int16_t xStartAvg = 0;
	int16_t zStartAvg = 0;
	int START_SAMPLE = 2;
	TrendKey xTrend = POSITIVE;
	TrendKey zTrend = POSITIVE;
	// For each axis get the delta & pos/neg trend
    if (axis == X_AXIS) {
	   #ifdef START_SAMPLE_STRATEGY
	   for (int i=0;i<START_SAMPLE;i++) {
	      xStartAvg += s_trend_data[i].x;
	   }
	   xStartAvg /=(START_SAMPLE+1);
	   int16_t minValue=xStartAvg;
	   int16_t maxValue=xStartAvg;
	   #else
	   
	   for (int i = 0;i<3;i++) {
	     xStartAvg = s_trend_data[i].x;
		 if (xStartAvg !=0) break;
		} 
		int16_t minValue=xStartAvg;
	   int16_t maxValue=xStartAvg;
	   START_SAMPLE=1;
	   #endif
	   for (int i=START_SAMPLE;i<10;i++) {
	      if (s_trend_data[i].x == 0) continue;
	   	  if (s_trend_data[i].x > maxValue) {
			maxValue = s_trend_data[i].x;
		  } else if (s_trend_data[i].x < minValue) {
			minValue = s_trend_data[i].x;
		  }
	   }
	   
	   xTrend = what_is_trend(xStartAvg,minValue, maxValue);
	   if (xTrend == POSITIVE) {
		 xdelta = what_is_delta(maxValue, xStartAvg);
		 
	   } else {
	     xdelta = what_is_delta(xStartAvg, minValue);
	   }
	   #if DEBUG
	   APP_LOG(APP_LOG_LEVEL_DEBUG, "Trend Calc- X_AXIS, %d", xdelta);
	   #endif
	   *delta_value = xdelta - OFFSET_XAXIS;
		*trend = xTrend;
    }	else if (axis == Z_AXIS) {
	   #ifdef START_SAMPLE_STRATEGY
	   START_SAMPLE=2;
	   for (int i=0;i<START_SAMPLE;i++) {
	      zStartAvg += s_trend_data[i].z;
	   }
	   zStartAvg /=(START_SAMPLE+1);
	   int16_t minValue=zStartAvg;
	   int16_t maxValue=zStartAvg;
	   #else
	   
	   for (int i = 0;i<3;i++) {
	     zStartAvg = s_trend_data[i].z;
		 if (zStartAvg !=0) break;
		}
        int16_t minValue=zStartAvg;
	   int16_t maxValue=zStartAvg;		
	   START_SAMPLE=1;
	   #endif
	   
	   for (int i=START_SAMPLE;i<10;i++) {
	      if (s_trend_data[i].z == 0) continue;
	   	  if (s_trend_data[i].z > maxValue) {
			maxValue = s_trend_data[i].z;
		  } else if (s_trend_data[i].z < minValue) {
			minValue = s_trend_data[i].z;
		  }
	   }
	   
	   zTrend = what_is_trend(zStartAvg,minValue, maxValue);
	   if (zTrend == POSITIVE) {
		 zdelta = what_is_delta(maxValue, zStartAvg);
	   } else {
	     zdelta = what_is_delta(zStartAvg, minValue);
	   }
	   #if DEBUG
	   APP_LOG(APP_LOG_LEVEL_DEBUG, "Trend Calc- Z_AXIS, %d", zdelta);
	   #endif
	   *delta_value = zdelta - OFFSET_ZAXIS;
		*trend = zTrend;
    }	
	
}


static void inform_app() {
  DictionaryIterator *iter;
  app_message_outbox_begin(&iter);
  APP_LOG(APP_LOG_LEVEL_DEBUG, "Inside Informing the app");
  if (!iter) {
    // Error creating outbound message
    return;
  }

  int value = lastCommand;
  APP_LOG(APP_LOG_LEVEL_DEBUG, "Informing the app");
  dict_write_int(iter, 0, &value, sizeof(int), true);
  dict_write_end(iter);
  s_InformApp_Ready=0;
  app_message_outbox_send();
}

static void decide_command() {
   int16_t xdelta, zdelta;
   TrendKey xTrend,zTrend;
   DirectionKey selectedAxis = Y_AXIS;
   bool validX, validZ;
   #if DEBUG
   APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - Entered");
   #endif
   validX=true;
   validZ=true;
   trend_cal(X_AXIS, &xdelta, &xTrend);
   trend_cal(Z_AXIS, &zdelta, &zTrend);
   
   if (xdelta < THRESHOLD_GESTURE_XAXIS) {
      APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - Ignoring X_AXIS, %d", xdelta);
	  validX = false;
   } 
   if (zdelta < THRESHOLD_GESTURE_ZAXIS) {
     APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - Ignoring Z_AXIS, %d", zdelta);
	 validZ = false;
   }
   
   if (validX && validZ) {
	  if (xdelta > zdelta) {
         selectedAxis = X_AXIS;
	  }	else {
	     selectedAxis = Z_AXIS;
	  }
   } else if (validX) {
      selectedAxis = X_AXIS;
   } else if (validZ) {
      selectedAxis = Z_AXIS;
   }
   
   if (selectedAxis == X_AXIS) {
   APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - XDelta: %d, XTrend: %d ", xdelta, xTrend);
     if (xTrend == POSITIVE) {
	    lastCommand = RIGHT_SWIPE;
	 } else {
	    lastCommand = LEFT_SWIPE;
	 }
   } else if (selectedAxis == Z_AXIS) {
		APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - zdelta: %d, zTrend: %d ", zdelta, zTrend);   
	 if (zTrend == POSITIVE) {
	    lastCommand = UP_SWIPE;
	 } else {
	    lastCommand = DOWN_SWIPE;
   }} else if (selectedAxis == Y_AXIS) {
      #if DEBUG
      APP_LOG(APP_LOG_LEVEL_DEBUG, "Command Decision - Ignored");   
	  #endif
   }
   // Need to inform the app
      
   if (selectedAxis != Y_AXIS) {
      APP_LOG(APP_LOG_LEVEL_DEBUG, "Send App the Swipe button: %d", lastCommand);   
	  inform_app();
   }
   clear_trend_data();
}

static void data_handler(AccelData *data, uint32_t num_samples) {
  // Long lived buffer
  static char s_buffer[128];
  if (!s_InformApp_Ready) {
    snprintf(s_buffer, sizeof(s_buffer), "Please wait.. until you see the values again!!");
	text_layer_set_text(s_output_layer, s_buffer);
	return;
	}
  // Compose string of all data
  snprintf(s_buffer, sizeof(s_buffer), 
    "N X,Y,Z\n0 %d,%d,%d\n1 %d,%d,%d\n2 %d,%d,%d\n Last Command: %d", 
    data[0].x, data[0].y, data[0].z, 
    data[1].x, data[1].y, data[1].z, 
    data[2].x, data[2].y, data[2].z, lastCommand
  );
  
  if (s_iter < 10) {
     s_trend_data[s_iter].x = cal_avg(data[0].x, data[1].x, data[2].x);
	 s_trend_data[s_iter].y = cal_avg(data[0].y, data[1].y, data[2].y);
	 s_trend_data[s_iter].z = cal_avg(data[0].z, data[1].z, data[2].z);
	 #if DEBUG
    APP_LOG(APP_LOG_LEVEL_DEBUG, "Trend data for %d iteration: (x,y,z) : %d,%d,%d",s_iter, s_trend_data[s_iter].x, s_trend_data[s_iter].y,s_trend_data[s_iter].z );
    #endif
  }
  else {
     s_iter = 0;	 
	 decide_command();
  }
  
  s_iter++;
  //Show the data
  text_layer_set_text(s_output_layer, s_buffer);
}

static void tap_handler(AccelAxisType axis, int32_t direction) {
  switch (axis) {
  case ACCEL_AXIS_X:
    if (direction > 0) {
      text_layer_set_text(s_output_layer, "X axis positive.");
    } else {
      text_layer_set_text(s_output_layer, "X axis negative.");
    }
    break;
  case ACCEL_AXIS_Y:
    if (direction > 0) {
      text_layer_set_text(s_output_layer, "Y axis positive.");
    } else {
      text_layer_set_text(s_output_layer, "Y axis negative.");
    }
    break;
  case ACCEL_AXIS_Z:
    if (direction > 0) {
      text_layer_set_text(s_output_layer, "Z axis positive.");
    } else {
      text_layer_set_text(s_output_layer, "Z axis negative.");
    }
    break;
  }
}

static void main_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect window_bounds = layer_get_bounds(window_layer);

  // Create output TextLayer
  s_output_layer = text_layer_create(GRect(5, 0, window_bounds.size.w - 10, window_bounds.size.h));
  text_layer_set_font(s_output_layer, fonts_get_system_font(FONT_KEY_GOTHIC_24));
  text_layer_set_text(s_output_layer, "No data yet.");
  text_layer_set_overflow_mode(s_output_layer, GTextOverflowModeWordWrap);
  layer_add_child(window_layer, text_layer_get_layer(s_output_layer));

  Tuplet initial_values[] = {
    TupletInteger(REQUEST_TYPE, (uint8_t) 1),
	TupletInteger(RESPONSE_READY, (uint8_t) 1),
	};
   
   app_sync_init(&s_sync, s_sync_buffer, sizeof(s_sync_buffer),
      initial_values, ARRAY_LENGTH(initial_values),
      sync_tuple_changed_callback, sync_error_callback, NULL);
    inform_app();	  
}

static void main_window_unload(Window *window) {
  // Destroy output TextLayer
  text_layer_destroy(s_output_layer);
}

static void init() {
  // Create main Window
  s_main_window = window_create();
  window_set_window_handlers(s_main_window, (WindowHandlers) {
    .load = main_window_load,
    .unload = main_window_unload
  });
  window_stack_push(s_main_window, true);

  // Use tap service? If not, use data service
  if (TAP_NOT_DATA) {
    // Subscribe to the accelerometer tap service
    accel_tap_service_subscribe(tap_handler);
  } else {
    // Subscribe to the accelerometer data service
    int num_samples = 3;
    accel_data_service_subscribe(num_samples, data_handler);

    // Choose update rate
    accel_service_set_sampling_rate(ACCEL_SAMPLING_10HZ);
  }
  APP_LOG(APP_LOG_LEVEL_DEBUG, "App initialized - cleared trend data");
  s_iter = 0;
  clear_trend_data();
  s_InformApp_Ready=1;
    
  app_message_register_inbox_received(inbox_received_callback);
  app_message_open(app_message_inbox_size_maximum(), app_message_outbox_size_maximum());
}

static void deinit() {
  // Destroy main Window
  window_destroy(s_main_window);

  if (TAP_NOT_DATA) {
    accel_tap_service_unsubscribe();
  } else {
    accel_data_service_unsubscribe();
  }
    app_sync_deinit(&s_sync);
}

int main(void) {
  init();
  app_event_loop();
  deinit();
}